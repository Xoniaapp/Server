generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique

  name         String?
  username     String  @unique
  email        String  @unique
  phone        String? @unique
  password     String
  avatar_hash  String? @unique
  banner_hash  String? @unique
  banner       String?
  avatar       String
  banner_color String?
  verified     Boolean @default(false)
  two_fa       Boolean @default(false)
  bio          String?
  pronouns     String?
  two_fa_key   String  @unique

  // relationships
  guilds      Guild[]
  messages    Message[]
  attachments Attachment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_friends             Friend[]        @relation("UserFriends")
  user_friended            Friend[]        @relation("UserFriended")
  friend_requests_received FriendRequest[] @relation("FriendRequestsReceived")
  friend_requests_sent     FriendRequest[] @relation("FriendRequestsSent")
  dms_received             DM[]            @relation("DMsReceived")
  dms_sent                 DM[]            @relation("DMsSent")
  guild_participations     Member[]        @relation("GuildParticipations")

  @@index([username, email, avatar_hash, banner_hash])
  @@map("users")
}

model Guild {
  id String @id @unique

  icon        String?
  banner      String?
  icon_hash   String? @unique
  banner_hash String? @unique
  name        String
  description String

  mfa_level          String // todo
  nsfw_level         String // todo
  notification_level String // todo
  verification_level String // todo
  features           String // todo

  // relationships
  channels Channel[]
  members  Member[]  @relation("GuildMembers")
  owner    User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  owner_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([owner_id])
  @@map("guilds")
}

model Channel {
  id String @id @unique

  name        String
  description String?
  type        ChannelType

  is_public Boolean @default(true)
  is_group  Boolean @default(false)
  is_dm     Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  messages    Message[]
  attachments Attachment[]

  guild    Guild?  @relation(fields: [guild_id], references: [id], onDelete: Cascade)
  guild_id String?

  @@index([guild_id])
  @@map("channels")
}

model DM {
  id         String  @id @unique
  channel_id String  @unique
  is_open    Boolean @default(true)

  sender_id   String
  receiver_id String

  receiver User @relation("DMsReceived", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sender   User @relation("DMsSent", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([channel_id, is_open, sender_id, receiver_id])
  @@map("dm_channels")
}

model Message {
  id String @id @unique

  content String

  channel Channel @relation(fields: [channel_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  channel_id String
  user_id    String

  attachments Attachment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([channel_id, user_id])
  @@map("messages")
}

model Attachment {
  id String @id @unique

  path String @unique
  name String
  type String
  size String
  hash String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  message Message @relation(fields: [message_id], references: [id])
  channel Channel @relation(fields: [channel_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  message_id String
  channel_id String
  user_id    String

  @@index([message_id, channel_id, user_id, hash])
  @@map("attachments")
}

model Member {
  user_id  String
  guild_id String

  avatar       String?
  avatar_hash  String?
  banner       String?
  banner_hash  String?
  banner_color String?
  name         String?
  pronouns     String?
  bio          String?
  color        String?
  role         String?

  last_seen  DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  guild  Guild @relation("GuildMembers", fields: [guild_id], references: [id], onDelete: Cascade)
  member User  @relation("GuildParticipations", fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, guild_id])
  @@index([user_id, guild_id])
  @@map("members")
}

model Friend {
  user_id   String
  friend_id String

  user   User @relation("UserFriends", fields: [friend_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  friend User @relation("UserFriended", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, friend_id])
  @@index([user_id, friend_id])
  @@map("friends")
}

model FriendRequest {
  sender_id   String
  receiver_id String

  receiver User @relation("FriendRequestsReceived", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sender   User @relation("FriendRequestsSent", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([sender_id, receiver_id])
  @@index([sender_id, receiver_id])
  @@map("friend_requests")
}

enum ChannelType {
  VOICE
  TEXT
  ANNOUNCEMENT
  RULES
  SYSTEM

  @@map("channel_type")
}
