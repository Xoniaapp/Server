generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @unique @default(cuid()) @map("_id")
  username  String
  image_url String
  suffix    Int
  email     String   @unique
  password String
  verified  Boolean  @default(false)
  donor     Boolean  @default(false)
  badges    String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Guilds   Guild[]
  Groups   Group[]
  Invites  Invite[]
  Messages Message[]
  Friends  Friend[]
  DMs      DM[]
}

// TODO: Profile support.
model Profile {
  id String @id @unique @default(cuid()) @map("_id")
}

model Friend {
  id        String  @id @unique @default(cuid()) @map("_id")
  username  String
  Account   Account @relation(fields: [accountId], references: [id])
  accountId String
}

model Group {
  id       String    @id @unique @default(cuid()) @map("_id")
  name     String
  Owner    Account   @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id String
  Messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guild {
  id        String  @id @unique @default(cuid()) @map("_id")
  name      String
  icon_url  String
  banner_bg String
  invite_bg String
  partner   Boolean @default(false)
  owner_id  String

  invites Invite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Owner    Account   @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  Channels Channel[]
  Messages Message[]
}

model Channel {
  id      String      @id @unique @default(cuid()) @map("_id")
  name    String
  type    ChannelType
  private Boolean
  guildId String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Messages  Message[]
}

model Message {
  id String @id @unique @default(cuid()) @map("_id")

  text       String
  attachment String
  reaction   String[]

  authorId  String
  channelId String
  guildId   String?
  groupId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  Author  Account @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Guild   Guild?  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  Group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Invite {
  id           String @id @unique @default(cuid()) @map("_id")
  code         String
  guildId      String
  generated_by String
  time_used    Int
  // TODO: Add expiry

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Account Account @relation(fields: [generated_by], references: [id], onDelete: Cascade)
  Guild   Guild   @relation(fields: [guildId], references: [id])
}

model DM {
  id        String  @id @unique @default(cuid()) @map("_id")
  is_friend Boolean
  author_id String
  user_id   String
  Account   Account @relation(fields: [author_id], references: [id])
}

enum ChannelType {
  VOICE
  ANNOUNCEMENT
  FORUM
  TEXT
  STAGE
}
