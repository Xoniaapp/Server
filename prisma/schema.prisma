generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attachments {
  id         String    @id
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  url        String?
  file_type  String?
  filename   String?
  message_id String?
  messages   messages? @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_messages_attachment")

  @@index([message_id], map: "idx_attachments_message_id")
}

model bans {
  guild_id String
  user_id  String
  guilds   guilds @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bans_guild")
  users    users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bans_user")

  @@id([guild_id, user_id])
}

model channels {
  id            String     @id
  created_at    DateTime?  @db.Timestamptz(6)
  updated_at    DateTime?  @db.Timestamptz(6)
  guild_id      String?
  name          String?
  is_public     Boolean?
  is_dm         Boolean?
  is_group      Boolean?
  last_activity DateTime?  @db.Timestamptz(6)
  guilds        guilds?    @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_guilds_channels")
  messages      messages[]

  @@index([created_at], map: "idx_channels_created_at")
  @@index([guild_id], map: "idx_channels_guild_id")
  @@index([is_public], map: "idx_channels_is_public")
}

model dm_members {
  id         String
  user_id    String
  channel_id String
  is_open    Boolean?
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)

  @@id([id, user_id, channel_id])
  @@index([created_at], map: "idx_dm_members_created_at")
}

model friend_requests {
  sender_id                                String
  receiver_id                              String
  users_friend_requests_receiver_idTousers users  @relation("friend_requests_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_friend_requests_requests")
  users_friend_requests_sender_idTousers   users  @relation("friend_requests_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_friend_requests_user")

  @@id([sender_id, receiver_id])
}

model friends {
  user_id                        String
  friend_id                      String
  users_friends_friend_idTousers users  @relation("friends_friend_idTousers", fields: [friend_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_friends_friends")
  users_friends_user_idTousers   users  @relation("friends_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_friends_user")

  @@id([user_id, friend_id])
}

model guilds {
  id           String     @id
  created_at   DateTime?  @db.Timestamptz(6)
  updated_at   DateTime?  @db.Timestamptz(6)
  name         String
  owner_id     String
  icon         String?
  invite_links String[]
  bans         bans[]
  channels     channels[]

  @@index([created_at], map: "idx_guilds_created_at")
}

model members {
  user_id    String
  guild_id   String
  nickname   String?
  color      String?
  last_seen  DateTime? @db.Timestamptz(6)
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)

  @@id([user_id, guild_id])
  @@index([created_at], map: "idx_members_created_at")
}

model messages {
  id          String        @id
  created_at  DateTime?     @db.Timestamptz(6)
  updated_at  DateTime?     @db.Timestamptz(6)
  text        String?
  user_id     String?
  channel_id  String?
  attachments attachments[]
  channels    channels?     @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_channels_messages")
  users       users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_message")

  @@index([channel_id], map: "idx_messages_channel_id")
  @@index([created_at], map: "idx_messages_created_at")
  @@index([user_id], map: "idx_messages_user_id")
}

model users {
  id                                                 String            @id
  created_at                                         DateTime?         @db.Timestamptz(6)
  updated_at                                         DateTime?         @db.Timestamptz(6)
  bot                                                Boolean
  system                                             Boolean           @default(false)
  avatar                                             String?
  avatarUrl                                          String
  discriminator                                      String
  tag                                                String
  username                                           String
  email                                              String            @unique(map: "idx_users_email")
  password                                           String
  image                                              String?
  status                                             UserStatus
  badges                                             Badges
  flags                                              Flags
  online                                             Boolean?
  bans                                               bans[]
  friend_requests_friend_requests_receiver_idTousers friend_requests[] @relation("friend_requests_receiver_idTousers")
  friend_requests_friend_requests_sender_idTousers   friend_requests[] @relation("friend_requests_sender_idTousers")
  friends_friends_friend_idTousers                   friends[]         @relation("friends_friend_idTousers")
  friends_friends_user_idTousers                     friends[]         @relation("friends_user_idTousers")
  messages                                           messages[]

  @@index([created_at], map: "idx_users_created_at")
  @@index([online], map: "idx_users_is_online")
}

enum UserStatus {
  Online
  Idle
  DoNotDistrub
  Offline
}

enum Badges {
  Developer
  Supporter
  SecurityDisclosure
  Founder
  PlatformModerator
  ActiveSupporter
  EarlyAdopter
}

enum Flags {
  Suspended
  Deleted
  Banned
}
